
package maszynaturingadodawanie;

import java.io.File;
import java.io.IOException;
import java.nio.file.Files;
import java.nio.file.Paths;
import java.util.LinkedList;
import javax.swing.JFileChooser;
import javax.swing.JOptionPane;

public class Main extends javax.swing.JFrame {

    TuringMachine tm;
    LinkedList<String> tape;
 
    public Main() {
        initComponents();
        tm = new TuringMachine();

        tm.addTransition(0, "0", 0, "0", TapeShift.RIGHT);
        tm.addTransition(0, "1", 0, "1", TapeShift.RIGHT);
        tm.addTransition(0, "E", 1, "E", TapeShift.RIGHT);
        tm.addTransition(0, "X", 0, "X", TapeShift.RIGHT);
        tm.addTransition(0, "Y", 0, "Y", TapeShift.RIGHT);

        tm.addTransition(1, "0", 1, "0", TapeShift.RIGHT);
        tm.addTransition(1, "1", 1, "1", TapeShift.RIGHT);
        tm.addTransition(1, "E", 2, "E", TapeShift.LEFT);
        tm.addTransition(1, "X", 1, "X", TapeShift.RIGHT);
        tm.addTransition(1, "Y", 1, "Y", TapeShift.RIGHT);

        tm.addTransition(2, "0", 3, "E", TapeShift.LEFT);
        tm.addTransition(2, "1", 4, "E", TapeShift.LEFT);
        tm.addTransition(2, "E", 9, "E", TapeShift.LEFT);
        tm.addTransition(2, "X", 2, "X", TapeShift.NONE); 
        tm.addTransition(2, "Y", 2, "Y", TapeShift.NONE); 

        tm.addTransition(3, "0", 3, "0", TapeShift.LEFT);
        tm.addTransition(3, "1", 3, "1", TapeShift.LEFT);
        tm.addTransition(3, "E", 5, "E", TapeShift.LEFT);
        tm.addTransition(3, "X", 3, "X", TapeShift.LEFT);
        tm.addTransition(3, "Y", 3, "Y", TapeShift.LEFT);

        tm.addTransition(4, "0", 4, "0", TapeShift.LEFT);
        tm.addTransition(4, "1", 4, "1", TapeShift.LEFT);
        tm.addTransition(4, "E", 6, "E", TapeShift.LEFT);
        tm.addTransition(4, "X", 4, "X", TapeShift.LEFT);
        tm.addTransition(4, "Y", 4, "Y", TapeShift.LEFT);

        tm.addTransition(5, "0", 0, "X", TapeShift.RIGHT);
        tm.addTransition(5, "1", 0, "Y", TapeShift.RIGHT);
        tm.addTransition(5, "E", 0, "X", TapeShift.RIGHT);
        tm.addTransition(5, "X", 5, "X", TapeShift.LEFT);
        tm.addTransition(5, "Y", 5, "Y", TapeShift.LEFT);

        tm.addTransition(6, "0", 7, "1", TapeShift.NONE);
        tm.addTransition(6, "1", 6, "0", TapeShift.LEFT);
        tm.addTransition(6, "E", 7, "1", TapeShift.NONE);
        tm.addTransition(6, "X", 6, "X", TapeShift.LEFT);
        tm.addTransition(6, "Y", 6, "Y", TapeShift.LEFT);

        tm.addTransition(7, "0", 7, "0", TapeShift.RIGHT);
        tm.addTransition(7, "1", 7, "1", TapeShift.RIGHT);
        tm.addTransition(7, "E", 8, "E", TapeShift.LEFT);
        tm.addTransition(7, "X", 8, "X", TapeShift.LEFT);
        tm.addTransition(7, "Y", 8, "Y", TapeShift.LEFT);

        tm.addTransition(8, "0", 0, "X", TapeShift.RIGHT);
        tm.addTransition(8, "1", 0, "Y", TapeShift.RIGHT);
        tm.addTransition(8, "E", 8, "E", TapeShift.NONE); 
        tm.addTransition(8, "X", 8, "X", TapeShift.NONE); 
        tm.addTransition(8, "Y", 8, "Y", TapeShift.NONE); 

        tm.addTransition(9, "0", 9, "0", TapeShift.LEFT);
        tm.addTransition(9, "1", 9, "1", TapeShift.LEFT);
        tm.addTransition(9, "E", 10, "E", TapeShift.RIGHT);
        tm.addTransition(9, "X", 9, "0", TapeShift.LEFT);
        tm.addTransition(9, "Y", 9, "1", TapeShift.LEFT);

        tape = new LinkedList<>();
    }
    
    private void loadTapeFromFile(String path) {
        try {
            String[] numbers = getSequencesFromFile(path);
            for (String string : numbers[0].trim().split(" ")) {
                tape.add(string);
            }
            tape.add("E");
            for (String string : numbers[1].trim().split(" ")) {
                tape.add(string);
            }
        } catch (IOException ioe) {
            System.out.println("Nie udało się wczytać pliku");
        }
    }
    
    private static String[] getSequencesFromFile(String path) throws IOException {
        return readAllTextFromFile(path).split("#");
    }
    
    private static String readAllTextFromFile(String path) throws IOException {
        byte[] encoded = Files.readAllBytes(Paths.get(path));
        return new String(encoded);
    }

    /**
     * This method is called from within the constructor to initialize the form.
     * WARNING: Do NOT modify this code. The content of this method is always
     * regenerated by the Form Editor.
     */
    @SuppressWarnings("unchecked")
    // <editor-fold defaultstate="collapsed" desc="Generated Code">//GEN-BEGIN:initComponents
    private void initComponents() {

        chooseFileButton = new javax.swing.JButton();
        fileTextField = new javax.swing.JTextField();
        jLabel1 = new javax.swing.JLabel();
        stateLabel = new javax.swing.JLabel();
        runButton = new javax.swing.JButton();
        jPanel2 = new javax.swing.JPanel();
        tapeLabel = new javax.swing.JLabel();
        tapeHeadLabel = new javax.swing.JLabel();

        setDefaultCloseOperation(javax.swing.WindowConstants.EXIT_ON_CLOSE);

        chooseFileButton.setText("Wybierz plik");
        chooseFileButton.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                chooseFileButtonActionPerformed(evt);
            }
        });

        jLabel1.setHorizontalAlignment(javax.swing.SwingConstants.CENTER);
        jLabel1.setText("Stan");

        stateLabel.setFont(new java.awt.Font("Courier New", 0, 24)); // NOI18N
        stateLabel.setHorizontalAlignment(javax.swing.SwingConstants.CENTER);
        stateLabel.setText("q0");

        runButton.setFont(new java.awt.Font("Tahoma", 0, 24)); // NOI18N
        runButton.setText("OK");
        runButton.setEnabled(false);
        runButton.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                runButtonActionPerformed(evt);
            }
        });

        tapeLabel.setFont(new java.awt.Font("Courier New", 0, 24)); // NOI18N
        tapeLabel.setHorizontalAlignment(javax.swing.SwingConstants.CENTER);

        tapeHeadLabel.setFont(new java.awt.Font("Courier New", 0, 24)); // NOI18N
        tapeHeadLabel.setHorizontalAlignment(javax.swing.SwingConstants.CENTER);

        javax.swing.GroupLayout jPanel2Layout = new javax.swing.GroupLayout(jPanel2);
        jPanel2.setLayout(jPanel2Layout);
        jPanel2Layout.setHorizontalGroup(
            jPanel2Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(jPanel2Layout.createSequentialGroup()
                .addContainerGap()
                .addGroup(jPanel2Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addComponent(tapeLabel, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                    .addComponent(tapeHeadLabel, javax.swing.GroupLayout.Alignment.TRAILING, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
                .addContainerGap())
        );
        jPanel2Layout.setVerticalGroup(
            jPanel2Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(jPanel2Layout.createSequentialGroup()
                .addContainerGap()
                .addComponent(tapeLabel, javax.swing.GroupLayout.PREFERRED_SIZE, 61, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addComponent(tapeHeadLabel, javax.swing.GroupLayout.PREFERRED_SIZE, 61, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addContainerGap(21, Short.MAX_VALUE))
        );

        javax.swing.GroupLayout layout = new javax.swing.GroupLayout(getContentPane());
        getContentPane().setLayout(layout);
        layout.setHorizontalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(layout.createSequentialGroup()
                .addContainerGap()
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, layout.createSequentialGroup()
                        .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.TRAILING)
                            .addGroup(layout.createSequentialGroup()
                                .addComponent(fileTextField, javax.swing.GroupLayout.PREFERRED_SIZE, 330, javax.swing.GroupLayout.PREFERRED_SIZE)
                                .addGap(18, 18, 18)
                                .addComponent(chooseFileButton))
                            .addGroup(layout.createSequentialGroup()
                                .addComponent(jLabel1, javax.swing.GroupLayout.PREFERRED_SIZE, 75, javax.swing.GroupLayout.PREFERRED_SIZE)
                                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                                .addComponent(stateLabel, javax.swing.GroupLayout.PREFERRED_SIZE, 75, javax.swing.GroupLayout.PREFERRED_SIZE)))
                        .addGap(18, 18, 18)
                        .addComponent(runButton, javax.swing.GroupLayout.DEFAULT_SIZE, 135, Short.MAX_VALUE))
                    .addComponent(jPanel2, javax.swing.GroupLayout.Alignment.TRAILING, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
                .addContainerGap())
        );
        layout.setVerticalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(layout.createSequentialGroup()
                .addContainerGap()
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING, false)
                    .addGroup(layout.createSequentialGroup()
                        .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                            .addComponent(chooseFileButton)
                            .addComponent(fileTextField, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                        .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                            .addComponent(stateLabel, javax.swing.GroupLayout.PREFERRED_SIZE, 41, javax.swing.GroupLayout.PREFERRED_SIZE)
                            .addComponent(jLabel1, javax.swing.GroupLayout.PREFERRED_SIZE, 24, javax.swing.GroupLayout.PREFERRED_SIZE)))
                    .addComponent(runButton, javax.swing.GroupLayout.PREFERRED_SIZE, 100, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addGap(99, 99, 99)
                .addComponent(jPanel2, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                .addContainerGap())
        );

        pack();
    }// </editor-fold>//GEN-END:initComponents

    private void chooseFileButtonActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_chooseFileButtonActionPerformed
        // TODO add your handling code here:
        JFileChooser fileChooser = new JFileChooser();
        if (fileChooser.showOpenDialog(this) == JFileChooser.APPROVE_OPTION) {
            File file = fileChooser.getSelectedFile();
            loadTapeFromFile(file.getPath());
            fileTextField.setText(file.getPath());
            runButton.setEnabled(true);
            updateTape(tape);
        }
    }//GEN-LAST:event_chooseFileButtonActionPerformed

    private void runButtonActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_runButtonActionPerformed
        // TODO add your handling code here:
        if ("OK".equals(runButton.getText())) {
            chooseFileButton.setEnabled(false);
            tm.setTape(tape);
            tm.run();
            runButton.setText(">");
        } else if ("RESET".equals(runButton.getText())) {
            runButton.setEnabled(false);
            chooseFileButton.setEnabled(true);
            runButton.setText("OK");
            clearLabels();
        } else if (tm.nextStep()) {
        } else {
            finish();
        }

        updateTape();
        updateState();
    }//GEN-LAST:event_runButtonActionPerformed

    private void finish() {
        String info = "Obliczenia zakończone";
        int input = JOptionPane.showOptionDialog(null, info, "Komunikat", JOptionPane.PLAIN_MESSAGE, JOptionPane.INFORMATION_MESSAGE, null, null, null);
        if(input == JOptionPane.OK_OPTION) {
            runButton.setText("RESET");
            tape = new LinkedList<>();
        }
    }
    
    private void clearLabels() {
        stateLabel.setText("q0");
        tapeLabel.setText("sdsaf");
        tapeHeadLabel.setText("");
    }
    
    private void updateTape() {
        StringBuilder sb = new StringBuilder();
        for (String symbol : tm.getTape()) {
            sb.append(symbol).append(" ");
        }
        tapeLabel.setText(sb.toString());
        
        sb = new StringBuilder();
        int tapeHeadIndex = tm.getTapeHead().nextIndex();
        
        for (int i = 0; i < tm.getTape().size(); i++) {
            if (i == tapeHeadIndex)
                sb.append("^");
            else
                sb.append(" ");
            sb.append(" ");
        }
        tapeHeadLabel.setText(sb.toString());
    }
    
    
    private void updateTape(LinkedList<String> tape) {
        StringBuilder sb = new StringBuilder();
        for (String symbol : tape) {
            sb.append(symbol).append(" ");
        }
        tapeLabel.setText(sb.toString());
    }
    
    private void updateState() {
        stateLabel.setText("q" + tm.getCurrentState());
    }
    /**
     * @param args the command line arguments
     */
    public static void main(String args[]) {
        /* Set the Nimbus look and feel */
        //<editor-fold defaultstate="collapsed" desc=" Look and feel setting code (optional) ">
        /* If Nimbus (introduced in Java SE 6) is not available, stay with the default look and feel.
         * For details see http://download.oracle.com/javase/tutorial/uiswing/lookandfeel/plaf.html 
         */
        try {
            for (javax.swing.UIManager.LookAndFeelInfo info : javax.swing.UIManager.getInstalledLookAndFeels()) {
                if ("Nimbus".equals(info.getName())) {
                    javax.swing.UIManager.setLookAndFeel(info.getClassName());
                    break;
                }
            }
        } catch (ClassNotFoundException ex) {
            java.util.logging.Logger.getLogger(Main.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (InstantiationException ex) {
            java.util.logging.Logger.getLogger(Main.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (IllegalAccessException ex) {
            java.util.logging.Logger.getLogger(Main.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (javax.swing.UnsupportedLookAndFeelException ex) {
            java.util.logging.Logger.getLogger(Main.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        }
        //</editor-fold>

        /* Create and display the form */
        java.awt.EventQueue.invokeLater(new Runnable() {
            public void run() {
                new Main().setVisible(true);
            }
        });
    }

    // Variables declaration - do not modify//GEN-BEGIN:variables
    private javax.swing.JButton chooseFileButton;
    private javax.swing.JTextField fileTextField;
    private javax.swing.JLabel jLabel1;
    private javax.swing.JPanel jPanel2;
    private javax.swing.JButton runButton;
    private javax.swing.JLabel stateLabel;
    private javax.swing.JLabel tapeHeadLabel;
    private javax.swing.JLabel tapeLabel;
    // End of variables declaration//GEN-END:variables
}
